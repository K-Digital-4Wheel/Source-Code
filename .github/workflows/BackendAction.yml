name: Deploy to Amazon ECS

on:
  push:
    branches: [ "master" ]

# action이 가진 repo에 대한 권한
permissions:
  contents: read

jobs:
  deploy:
    # needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 저장소 Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file backend/leadtime/pom.xml

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          
      - name: Install Docker Compose
        run: |      
          export DOCKER_CLI_EXPERIMENTAL=enabled
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          
      - name: Build and push Docker images with Docker Compose
        env:
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1
        run: |
          docker-compose build
          docker-compose push
          
#       DOCKER_BUILDKIT과 COMPOSE_DOCKER_CLI_BUILD 환경 변수를 설정하여 BuildKit을 사용하도록 설정하고 
#       Docker Compose가 새로운 docker CLI를 사용하도록 합니다. 
#       이렇게 설정하면 Docker Compose가 더욱 빠르고 안정적으로 이미지를 빌드할 수 있습니다.
        
      - name: Deploy to AWS
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.SSH_KEY }}
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          port: 22
          script: |
            docker stop $(docker ps -a -q) 
            docker rm $(docker ps -a -q) 
                      
            docker pull upcoderk/flask-app
            docker run -d -p 5000:5000 --name flask-container upcoderk/flask-app
            
            docker pull upcoderk/spring-boot-app
            docker run -d -p 8080:8080 --name spring-boot-container upcoderk/spring-boot-app
      

